enclave {
    from "mbedtls_SGX.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_tkey_exchange.edl" import *;
    include "../common/ssl_context.h"
    include "sgx_key_exchange.h"
    include "sgx_tkey_exchange.h"
    include "protocol.h"

    trusted {
        /* define ECALLs here. */
        public int sgx_connect();
        public int sgx_accept();
        public void ssl_conn_init(void);
        public void ssl_conn_teardown(void);
        public void ssl_conn_handle(long int thread_id, [in,out] thread_info_t* thread_info);
        public int verifier_step1(uint32_t msg0_extended_epid_group_id, [in, out] sgx_ra_msg1_t *msg1, [in, out] sgx_ra_msg2_t *msg2, [in, out] char **sigrl);
        public int verifier_step2([in, out]sgx_ra_msg1_t *msg1, [in, out] sgx_ra_msg3_t **msg3, size_t msg3_size, [in, out] ra_msg4_t *msg4);

        public sgx_status_t enclave_ra_init_def(int b_pse, [out] sgx_ra_context_t *ctx, [out] sgx_status_t *pse_status);
        public sgx_status_t enclave_ra_init(sgx_ec256_public_t key, int b_pse, [out] sgx_ra_context_t *ctx, [out] sgx_status_t *pse_status);
        public sgx_status_t enclave_ra_close(sgx_ra_context_t ctx);

    };

    untrusted {
        /* define OCALLs here. */
    };
};
